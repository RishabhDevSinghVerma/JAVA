Introduction to OOPS:
----------------------

Object-oriented programming System(OOPs) is a programming paradigm based
on the concept of “objects” and “classes” that contain data and methods. The
primary purpose of OOP is to increase the flexibility and maintainability of
programs. It is used to structure a software program into simple, reusable pieces of
code blueprints (called classes) which are used to create individual instances of
objects.


What is an Object ?
-------------------

The object is an entity that has a state and a behavior associated with it. It may be
any real-world object like the mouse, keyboard, chair, table, pen, etc.
Objects have states and behaviors. Arrays are objects. You've been using objects all
along and may not even realize it. Apart from primitive data types, objects are all
around in java.


What is a Class ?
-----------------

A class is a blueprint that defines the variables and the methods (Characteristics)
common to all objects of a certain kind.
Example: If Car is a class, then Maruti 800 is an object of the Car class. All cars share
similar features like 4 wheels, 1 steering wheel, windows, breaks etc. Maruti 800 (The Car
object) has all these features.

Defining a Class in Java
------------------------

All class definitions start with the class keyword, which is followed by the name of
the class.

Here is an example of a Car class:

class Car{
}


Naming Convention of Class
--------------------------

Java class names are written in CapitalizedWords notation by convention. For
example,a class for a specific model of Car like the Bugatti Veyron would be
written as BugattiVeyron. The first letter is capitalized. This is just a good
programming practice.

Access Modifiers
----------------

1. Private: The access level of a private modifier is only within the class. It
cannot be accessed from outside the class.

2. Default: The access level of a default modifier is only within the package. It
cannot be accessed from outside the package. If you do not specify any
access level, it will be the default.

3. Protected: The access level of a protected modifier is within the package and
outside the package through child class. If you do not make the child class, it
cannot be accessed from outside the package.

4. Public: The access level of a public modifier is everywhere. It can be accessed
from within the class, outside the class, within the package and outside the
package.

We write the type of modifier before every method or data member.


    --------------------------------------------------------------------------------
    |    Access Modifier     Same Class    Another Class       Another Class       |
    |                                      In Same Package     In different Package|
    |------------------------------------------------------------------------------|
    |    Private             Accessable    Not Accessable       Not Accessable     |
    |                                                                              |
    |    Public              Accessable    Accessable           Accessable         |
    |                                                                              |
    |    Default             Accessable    Accessable           Not Accessable     |
    |                                                                              |
    |   Protected            Accessable    Accessable          Accessable          |
    |                                                       (Create a Subclas)     |
    --------------------------------------------------------------------------------

The this Parameter
------------------

● The this parameter is a reference to the current instance of the class and is
used to access variables that belong to the class.

● We can use this every time but the main use of this comes in picture when
the attributes and data members share the same name.

Let’s update the Car class with the Car method that creates name and topSpeed
attributes:


class Car{
 String name;
 int topSpeed;
 public Car(String carName, int speed){
 this.name = carName;
 this.topSpeed = speed;
 }
}

In the body of constructor, two statements are using the self variable:
1. this.name = name assigns the value of the name parameter to name attribute.
2. this.topSpeed= topSpeed assigns the value of the topSpeed parameter to
topSpeed attribute.

All Car objects have a name and a topSpeed, but the values for the name and
topSpeed attributes will vary depending on the Car instance. Different objects of
the Car class will have different names and top speeds.

Constructor
-----------

● Constructors are generally used for instantiating an object.
● The task of a constructor is to initialize(assign values) to the data members of
the class when an object of the class is created.
● In Java, constructor for a class must be of the same name as of class.
● In Java, constructors don't have a return type.

Syntax of Constructor Declaration
public Car(){
 // body of the constructor
}

Types of constructors
● Default Constructor: The default constructor is a simple constructor that
doesn’t accept any arguments.
● Parameterized Constructor: A constructor with parameters is known as a
parameterized constructor. The parameterized constructor takes its
arguments provided by the programmer.


Final Keyword
-------------

If you make any variable final, you cannot change the value of the final variable (It
will be constant).

class Pen{
 final int price = 15;
}
public class MCQs {
 public static void main(String[] args) {
 Pen p = new Pen();
 p.price = 20;
 System.out.println(p.price);
 }
}

There is a final variable price, we are going to change the value of this variable, but
it can't be changed because the final variable once assigned a value can never be
changed. Therefore this will give a compile time error.


Static Keyword
--------------

The static variable gets memory only once in the class area at the time of class
loading.
The static keyword in Java is used for memory management mainly. We can apply
static keyword with variables, methods, blocks and nested classes. The static
keyword belongs to the class rather than an instance of the class.

Now in this code, when we look carefully, even when the new instance of Car is
created, the year is defined by the first instance of the Car and it tends to remain


Example Code

class Car{
 static int year;
 String company_name;
}
class NewCar{
 public static void main (String[] args) {
 Car c=new Car();
 Car.year=2018;
 c.company_name="KIA";
 Car d=new Car();
 System.out.print(d.year);
 }
}


The same for all instances of the object. But here’s the catch, we can change the
value of this static variable from any instance. Here the output will be 2018 for
every instance as long as it is not changed.




