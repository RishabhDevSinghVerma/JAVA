    _____  ______  __     __  ______          ______   ______  _______  ________        
   |     \/      \|  \   |  \/      \        /      \ /      \|       \|        \ 
    \‚ñì‚ñì‚ñì‚ñì‚ñì  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\ ‚ñì‚ñì   | ‚ñì‚ñì  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\      |  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\ ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\ ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì
      | ‚ñì‚ñì ‚ñì‚ñì__| ‚ñì‚ñì ‚ñì‚ñì   | ‚ñì‚ñì ‚ñì‚ñì__| ‚ñì‚ñì      | ‚ñì‚ñì   \‚ñì‚ñì ‚ñì‚ñì  | ‚ñì‚ñì ‚ñì‚ñì__| ‚ñì‚ñì ‚ñì‚ñì__   
 __   | ‚ñì‚ñì ‚ñì‚ñì    ‚ñì‚ñì\‚ñì‚ñì\ /  ‚ñì‚ñì ‚ñì‚ñì    ‚ñì‚ñì      | ‚ñì‚ñì     | ‚ñì‚ñì  | ‚ñì‚ñì ‚ñì‚ñì    ‚ñì‚ñì ‚ñì‚ñì  \   
|  \  | ‚ñì‚ñì ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì \‚ñì‚ñì\  ‚ñì‚ñì| ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì      | ‚ñì‚ñì   __| ‚ñì‚ñì  | ‚ñì‚ñì ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\ ‚ñì‚ñì‚ñì‚ñì‚ñì
| ‚ñì‚ñì__| ‚ñì‚ñì ‚ñì‚ñì  | ‚ñì‚ñì  \‚ñì‚ñì ‚ñì‚ñì | ‚ñì‚ñì  | ‚ñì‚ñì      | ‚ñì‚ñì__/  \ ‚ñì‚ñì__/ ‚ñì‚ñì ‚ñì‚ñì  | ‚ñì‚ñì ‚ñì‚ñì_____ 
 \‚ñì‚ñì    ‚ñì‚ñì ‚ñì‚ñì  | ‚ñì‚ñì   \‚ñì‚ñì‚ñì  | ‚ñì‚ñì  | ‚ñì‚ñì       \‚ñì‚ñì    ‚ñì‚ñì\‚ñì‚ñì    ‚ñì‚ñì ‚ñì‚ñì  | ‚ñì‚ñì ‚ñì‚ñì     \
  \‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì \‚ñì‚ñì   \‚ñì‚ñì    \‚ñì    \‚ñì‚ñì   \‚ñì‚ñì        \‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì  \‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì \‚ñì‚ñì   \‚ñì‚ñì\‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì


/////////////////////////////////////////////////////////////////////////////////////////////////


Lets talk About Java‚òï

Java is a high-level, object-oriented, and platform-independent programming language. It was designed by James Gosling and his team at Sun Microsystems and released in 1995.
James Gosling is known as the father of Java. Before Java, its name was Oak. Since Oak was already a registered company, so James Gosling and his team changed the name from Oak to Java.

How Java Is Platform Independent~

Java achieves platform independence through its use of the Java Virtual Machine (JVM).
A key component that interprets or compiles Java programs into an intermediate form known as bytecode. 
This bytecode is not tied to any specific hardware or operating system, enabling Java's "Write Once, Run Anywhere" (WORA) principle.
When a Java program is compiled, it produces bytecode that can be executed on any device or operating system with a compatible JVM.

JDK (Java Development Kit)~

It is a kit with a compiler, Java Run-time Environment(JRE), Debuggers, and Java
documents. JDK should be installed on our computers for execution (creation,
compilation, and running) of the java program. We use the JRE Java Run-time
Environment, which provides the conditions to execute the Java program. It provides the
supporting files, JVM, and core classes.

           ---------------------------------------
           |     Java Runtime Environment(JRE)    |
           |                                      |
           |   ------------    ------------------ |
           |   |   Class   |   |  Java Virtual  | |
           |   | Libraries |   |   Machine      | |
           |   |           |   |    (JVM)       | |     
           |   -------------   ------------------ |
           |                                      |
           |  ----------------------------------- |
           |  |        Development Tools        | |
           |  |                                 | |
           |  ----------------------------------- |
           ----------------------------------------

                  Java Development Kit (JDK)

Java Runtime Environment(JRE)~

JDK includes JRE, which allows the Java program to run after installation. However, we
still can not compile it. It has a browser, applet support, and a few plugins. So, JRE is
required to run a java program on our respective computers.

JRE consists of following
‚óè Java class libraries ‚óè Java class loader ‚óè Java virtual machine (JVM)

When our software executes a particular program, it requires some environment to run
it. Usually, it is any operating system, for example, Unix, Linux, Microsoft Windows, or
macOS. Here JRE acts as a translator and supporter between the operating system and
the java program.

Java Virtual Machine(JVM)~

It is a significant part of JRE (Java Run-time Environment). When a program is run using
JDK and JRE, it also goes to the JVM. It contains three phases:

1. Compile the Code: JDK (Java Development Kit) provides a JAVAC compiler to get
through this step. JDK converts source code into compiled code (a specific
format) that can be easily interpreted by the JRE(Java Run-time Environment).

2. Run the Code: The bytecode provided by the compiler is run using JVM. JAVAC
compiler produces compiled code which is converted to machine code using
platform-specific JVMs. Different platforms have different JVMs. JVMs convert
the bytecode into platform-specific machine code.

3. Bytecode in the development process: We know JAVAC is present in JDK and
helps compile source code into bytecode which a JVM can execute. The
compiler saves it as a .class file. It can be viewed as a bytecode using a
disassembler like javap.

                               //How Java‚òï Code is Executed//

-------------        -------------------         -------------        
| Java Code  |       |     JAVAC        |       |  Byte Code  |   
| (.java)    |------>|  (Java Compiler) |------>|  (.class)   |
|            |       |                  |       |             |
-------------        --------------------       ---------------
                                                       |
                                                       |
                                                       v
                                      -----------------------------------
                                      |               JVM                |   
                                      |      (Java Virtual Machine)      |
                                      |                                  |
                                      ------------------------------------
                                                       |
                                                       |
                                                       |
                                                       v
                                               -----------------
                                               |    Native      |
                                               | (Machine Code) |      
                                               ------------------

features of Java~

1. Object-Oriented Programming Language
- Managing the program in terms of the collection of objects provides a clear
structure for the programs.
- Code maintenance and modification become easier.
- The main concepts of Object-Oriented programming are Abstraction,Encapsulation, Inheritance,and Polymorphism.
- Being an object-oriented language, Java supports methods (referred to as native
methods) written in other languages like C and C++.

2. Platform Independent
- Java is platform-independent because it uses JVM, which compiles source code
into bytecodes.
- Bytecodes can run on any operating system, be it Linux, Windows, or macOS,
which means if we compile a program on Linux OS, then we can run it on
Windows OS and vice-versa.
- Every OS has its own JVM (Java Virtual Machine), but the output produced by all
the OS is the same after the execution of the bytecode.
- This feature makes Java programs more simple, more secure, and more
portable.
- Writing code once and running it anywhere is an alluring feature of being
platform independent language.

3. Robust
- Java is reliable because it is developed in such a way that the Java compiler
detects even those errors that are not easily detected by other programming
languages.
- Features like robust garbage collection, memory allocation, and Exception
Handling makes it more reliable.
- Java uses a JIT (Just In Time) compiler where the code is executed on demand
by the compiler.
- This way, only those methods are completed that are called making applications
execute faster.

4. Multithreading
- Java program allows execution of more than one part of a program at one instance for maximum utilization of the CPU.

5. Distributed
- Java facilitates users to create distributed applications.
- RMI (Remote Method Invocation) and EJB(Enterprise Java Beans) are used for
creating distributed applications.
- This feature of Java makes us able to access files by calling the methods from
any machine on the internet.

/////////////////////////////////////////////////////////////////////////////////////////////////

Variables~

A variable is a container which holds the value while the Java program is executed. A variable is assigned with a data type.Variable is a name of memory location. 

/*
* 
* Syntax for Declaring a Variable:
* 
* Datatype variable_name  = [value]; 
* 
*/

Here type is one of Java primitive datatypes. The variable_name is the name of a variable. We can initialize the variable by specifying an equal sign and a value (Initialization is optional). However,the compiler never assigns a default value to an uninitialized local variable in Java. 

Rules for writing variable names -

üëâüèª All variable names may contain uppercase and lowercase letters (a- z, A-Z), underscore (_) dollar sign ($) and the digits 0 to 9. The dollar sign character is not intended for general use. No spaces and no other special characters are allowed.

üëâüèª The variable names must not begin with a number.

üëâüèª Java is case- sensitive. Uppercase characters are distinct from lowercase characters.

üëâüèª A Java keyword (reserved word) cannot be used as a variable name.

Datatypes~

Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory. 

       -----------------------------------------------------
       | DATA TYPE   |     DEFAULT VALUE    | DEFAULT SIZE |
       -----------------------------------------------------
       | char        | '\0'(null character) |   2 Bytes    |
       | byte        |         0            |   1 Byte     |
       | short       |         0            |   2 Bytes    |
       | int         |         0            |   4 Bytes    | 
       | long        |         0L           |   8 Bytes    |
       | float       |        0.0f          |   4 Bytes    |
       | Double      |        0.0d          |   8 Bytes    |
       | Boolean     |        false         |   1 Bytes    |
       -----------------------------------------------------

Taking Input~

For taking a Input in Java we use Scanner Class.In Java, Scanner is a class in java.util package used for obtaining the input of the primitive types like int, double, etc. and strings.Using the Scanner class in Java is the easiest way to read input in a Java program.The Java Scanner class breaks the input into tokens using a delimiter that is whitespace by default. It provides many ways to read and parse various primitive values.

In order to use scanner you have to write this import statement at the top

// import java.util.Scanner; //

Some commonly used Scanner class methods are as follows:

        ------------------------------------------------------------------------------- 
        |      METHOD                                DESCRIPTION                       |
        | public String next()         It returns the next token fromthe Scanner.      |
        | public String nextLine()     It moves the Scanner position to the next line  |
        |                               and returns the value as a string.             |
        | public byte nextByte()       It scans the next token as a byte.              |
        | public short nextShort()     It scans the next token as a short value.       |
        | public int nextInt()         It scans the next token as an int value.        |
        | public long nextLong()       It scans the next token as a long value.        |
        | public float nextFloat()     It scans the next token as a float value.       |  
        | public doublenextDouble()    It scans the next token as a double value       |
        --------------------------------------------------------------------------------

Taking Character as Input~

Java Scanner class provides nextInt() method for reading an integer value, nextDouble() method for reading a double value, nextLong() method for reading a long value, etc. But there is no nextChar() method in the Scanner class to read a character in Java. 
To read a character as input, we use next().charAt(0). The next() function returns the next token in the input as a string and charAt(0) function returns the first character in that string.

/*
* Example code to read a character as input:
*
* import java.util.Scanner;
* public class ScannerDemo1 
* {
* public static void main(String[] args)
*   {
* Scanner s = new Scanner(System.in);
* char ch = s.next().charAt(0); // character input
* System.out.println("input character = " +ch);
*   }
* }
* 
* Sample Input:
* k
* Output:
* input character = k
*
*/

About Main~ 

// public static void main(String[] args)  //

This is the line at which the program will begin executing. This statement is similar to start block in flowcharts. All Java programs begin execution by calling main().The curly braces{} indicate start and end of main. 

print()/println() Methods~

In order to print things to console we have to write - System.out.println("Hello World").
The built-in method print() is used to display the string which is passed to it.This output string is not followed by a newline, i.e., the next output will start on the same line.

The built-in method println() is similar to print(), except that println() outputs a newline after each call.

/*
* 
* Example Code:
* public static void main(String[] args) 
*  {
* System.out.println("Hello World");
* System.out.println("Programming is fun");
*  }
* 
* Output:
* Hello World
* Programming is fun
* 
*/

/////////////////////////////////////////////////////////////////////////////////////////////////

Conditional Statements~

Conditionals are used to execute a certain section of code only if some specific condition is fulfilled,and optionally execute other statements if the given condition is false.The result of given conditional expression must be either true or false.

                 |
                 |
                 |
                 v
                 /\
                /  \
               /    \       
              /      \
             /        \
            /          \
           /            \           false
          / Conditional  \_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
          \  Expression  /                               |
           \            /                                |
            \          /           --------------------------------------------
             \        /            | Statement Block is executed if condition  |
              \      /             |                   Is False                |
               \    /              ---------------------------------------------
                \  /                                     |
                 \/                                      |
                 |                                       |
       true      |                                       |
                 |                                       |
                 v                                       |
  -------------------------------------------            |
 | Statement Block is executed if condition  |           |
 |                   Is True                 |           |
 ---------------------------------------------           |
                 |                                       |
                 |<---------------------------------------
                 |
                 v
             ----------
             |  Exit  |
             ----------

Different variations of	this conditional statement are	‚Äì

üëâüèª if	statement
if statement evaluates the given test expression.If it is evaluated to true, then statements inside the if block will be executed.Otherwise, statements inside if block is skipped.

/*
* 
* Syntax
* 
* if(test_expression)
*     {
* //Statements to be executed only when test_expression is true
*     }
* 
*/

/*
* 
* Example Code
* public static void main(String args[])
*   {
* int n=5;
* if(n<10)
*     {
* System.out.print("Inside if statement");
*     }
* System.out.println("Outside if statement");
*   }
* 
* Output
* 
* Inside if statement
* Outside if statement
* 
*/

So if the condition given inside if parenthesis	is true, then statements inside if block	are executed first and then rest of the	code.And if the	condition evaluates to	false, then	statements inside if block will	be skipped.

üëâüèª If‚Äìelse statement

if statement evaluates the given test expression.If it is evaluated to	true,then statements	inside the if block will be executed.Otherwise,statements inside else block will be executed. After that,rest of the statements will be executed normally.

/*
* 
* Syntax
* 
* if(test_expression)
*  {
* //Statements to be executed when test_expression is true
*  }
* else
*  {
* //Statements to be executed when test_expression is false
*  }
* /

/*
* 
* Example Code:
* 
* public static void main(String[]args)
* {
* int a	=10,b=20;
* if(a>b)
*        {
* System.out.println("a	is bigger");
*        }
* else
*        {
* System.out.println("b	is bigger");
*        }
* }
* 
* Output
* 
* b is bigger
* 
*/

üëâüèª if  else‚Äìif
Using this we can execute statements based on multiple conditions.

/*	
* Syntax
* 
* if(test_expression_1)
*  {
* //Statements to be executed only when test_expression_1 is true
*  }
* else if(test_expression_2)
*  {
* //Statements to be executed only when test_expression_1 is false and test_expression_2 is true
*  }
* 
* else if(test_expression_2)
* {
* //Statements to be executed only when test_expression_1 & test_expression_2 are false and	
* test_expression_3 is true
* }
* ....
* ....
* 
* else 
*  {
* //Statements to be executed only when all the above test expressions are false
*  }

Out of all block of statements,	only one will be executed based	on the given test expression,	all others will	be skipped.As soon as any expression evaluates to true,	that block of statement	will be	executed and rest will be skipped.If none of the expression evaluates to true,then	the statements inside else will	be executed.

/*
* 
* Example Code:
* 
* public static void main(String[]args)
*  {
* int a=5;
* if(a<3)
*   {
* System.out.println("one");
*   }
* else if(a<10)
*    {
* System.out.println("two");
*    }
* else if(a<20)
*    {
* System.out.println("three");
*    }
* else 
*    {
* System.out.println("four");
*    }
* }
* 
* Output:two
*/

üëâüèª Nested if statament
We can put another if‚Äìelse statament inside an if.

/*
* 
* Syntax
* 
* if(test_expression_1)	
*     {
* //Statements to be executed when test_expression_1 is	true
* if(test_expression_2)	
*        {
*          //Statements to be executed when test_expression_2 is true
*        }
* else 
*        {
* //Statements to be executed when test_expression_2 is	false
*        }
*      }
* 
*/

/*
* 
* Example Code:
* 
* public static void main(String[]args)	
*   {   
* int a=15;
* if(a>10)
*  {
*  if(a>20)
*   {
* System.out.println("Hello");
*   }
* else
*   {
* System.out.println("Hi");
*   }
* }
* }
* 
* Output:Hi
*/

/////////////////////////////////////////////////////////////////////////////////////////////////

üëâüèª return keyword

return is a special keyword,when encountered ends the main.That	means,no statament will	be	executed after return statament.

/*
* 
* Example Code:
* 
* public static void main(String[]args){
* 
* int a=10;
* if(a>5){
* System.out.println("Hello");
* return;
*        }
* System.out.println("Hi");
* }
* 
* Output:Hello
* 
*/

/////////////////////////////////////////////////////////////////////////////////////////////////

Operators~

Operators are special symbols or keywords that are used to perform operations on variables and values.They are crucial for manipulating data and performing various computations in a program.
Java supports a variety of operators, which can be categorized into several types:

Arithmetic Operators:Arithmetic operators are used to perform mathematical operations on numeric values.

+ (addition)
- (subtraction)
* (multiplication)
/ (division)
% (modulus)

/*
*   Example Code
* 
*   class ExampleCode{
* 
*   public static void main(String args[]){
*   int a = 10;
*   int b = 20;
*   int sum = a + b;    // Addition
*   int difference = a - b;  // Subtraction
*   int product = a * b;     // Multiplication
*   int quotient = b / a;    // Division
*   int remainder = b % a;   // Modulus
*   
*   System.out.println("Sum of"+" "+a+" "+"And"+" "+b+" "+"is:"+sum);
*   System.out.println("Difference of"+" "+a+" "+"And"+" "+b+" "+"is:"+difference);
*   System.out.println("Modulus of"+" "+b+" "+"And"+" "+a+" "+"is:"+remainder);
*   System.out.println("Product of"+" "+a+" "+"And"+" "+b+" "+"is:"+product);
*   System.out.println("Divison of"+" "+b+" "+"And"+" "+a+" "+"is:"+quotient); 
*  
*   }
*   }
*/

Comparison Operators:Comparison operators are used to compare two values and return a boolean result.

== (equal to)
!= (not equal to)
> (greater than)
< (less than)
>= (greater than or equal to)
<= (less than or equal to)

/*
*   Example Code
* 
*   class ExampleCode{
* 
*   public static void main(String args[]){
*       int a = 10;
*       int b = 20;
*       
*       // Comparison operators
*       boolean isEqual = (a == b);
*       boolean notEqual = (a != b);
*       boolean greaterThan = (a > b);
*       boolean lessThan = (a < b);
*       boolean greaterThanOrEqual = (a >= b);
*       boolean lessThanOrEqual = (a <= b);
*       
*       // Output results
*       System.out.println(a + " is equal to " + b + ": " + isEqual);
*       System.out.println(a + " is not equal to " + b + ": " + notEqual);
*       System.out.println(a + " is greater than " + b + ": " + greaterThan);
*       System.out.println(a + " is less than " + b + ": " + lessThan);
*       System.out.println(a + " is greater than or equal to " + b + ": " + greaterThanOrEqual);
*       System.out.println(a + " is less than or equal to " + b + ": " + lessThanOrEqual);
*   }
*   }
*/


Logical Operators:Logical operators are used to perform logical operations on boolean values.

&& (logical AND)
|| (logical OR)
! (logical NOT)

/*
*   Example Code
* 
*   class ExampleCode{
* 
*   public static void main(String args[]){
*       int a = 10;
*       int b = 20;
*       int c = 5;
*       
*       // Logical operators
*       boolean andResult = (a < b) && (b > c);
*       boolean orResult = (a < b) || (b < c);
*       boolean notResult = !(a < b);
*       
*       // Output results
*       System.out.println("Result of (a < b) && (b > c): " + andResult);
*       System.out.println("Result of (a < b) || (b < c): " + orResult);
*       System.out.println("Result of !(a < b): " + notResult);
*   }
*   }
*/

Bitwise Operators:Bitwise operators perform operations on individual bits of binary representations of integers.

& (bitwise AND)
| (bitwise OR)
^ (bitwise XOR)
~ (bitwise NOT)
<< (left shift)
>> (right shift)
>>> (unsigned right shift)

/*
*   Example Code
* 
*   class ExampleCode{
* 
*   public static void main(String args[]){
*       int a = 5;    // binary: 0101
*       int b = 3;    // binary: 0011
*       
*       // Bitwise operators
*       int bitwiseAnd = a & b;
*       int bitwiseOr = a | b;
*       int bitwiseXor = a ^ b;
*       int bitwiseNotA = ~a;
*       int leftShift = a << 1;   // left shift by 1 position
*       int rightShift = a >> 1;  // right shift by 1 position
*       int unsignedRightShift = a >>> 1;  // unsigned right shift by 1 position
*       
*       // Output results
*       System.out.println("Bitwise AND of " + a + " and " + b + ": " + bitwiseAnd);
*       System.out.println("Bitwise OR of " + a + " and " + b + ": " + bitwiseOr);
*       System.out.println("Bitwise XOR of " + a + " and " + b + ": " + bitwiseXor);
*       System.out.println("Bitwise NOT of " + a + ": " + bitwiseNotA);
*       System.out.println("Left shift of " + a + " by 1 position: " + leftShift);
*       System.out.println("Right shift of " + a + " by 1 position: " + rightShift);
*       System.out.println("Unsigned right shift of " + a + " by 1 position: " +   
*       unsignedRightShift);
*   }
*   }
*/

Assignment Operators:Assignment operators are used to assign values to variables and perform operations in a concise manner.

= (assignment)
+= (addition assignment)
-= (subtraction assignment)
*= (multiplication assignment)
/= (division assignment)
%= (modulus assignment)
&= (bitwise AND assignment)
|= (bitwise OR assignment)
^= (bitwise XOR assignment)
<<= (left shift assignment)
>>= (right shift assignment)
>>>= (unsigned right shift assignment)

/*
*   Example Code with Assignment Operators
* 
*   class ExampleCode {
* 
*       public static void main(String args[]) {
*           // Assignment operator
*           int a = 10;
*           int b = a;
*           
*           // Output result
*           System.out.println("Value of b after assignment: " + b);
*           
*           // Addition assignment
*           int sum = 5;
*           sum += 3;  // Equivalent to sum = sum + 3;
*           
*           // Output result
*           System.out.println("Value of sum after addition assignment: " + sum);
*           
*           // Subtraction assignment
*           int difference = 8;
*           difference -= 4;  // Equivalent to difference = difference - 4;
*           
*           // Output result
*           System.out.println("Value of difference after subtraction assignment: " +
*           difference);
*           
*           // Multiplication assignment
*           int product = 6;
*           product *= 2;  // Equivalent to product = product * 2;
*           
*           // Output result
*           System.out.println("Value of product after multiplication assignment: " + product);
*           
*           // Division assignment
*           int quotient = 16;
*           quotient /= 4;  // Equivalent to quotient = quotient / 4;
*           
*           // Output result
*           System.out.println("Value of quotient after division assignment: " + quotient);
*           
*           // Modulus assignment
*           int remainder = 17;
*           remainder %= 5;  // Equivalent to remainder = remainder % 5;
*           
*           // Output result
*           System.out.println("Value of remainder after modulus assignment: " + remainder);
*           
*           // Bitwise AND assignment
*           int bitwiseAndResult = 12;
*           bitwiseAndResult &= 5;  // Equivalent to bitwiseAndResult = bitwiseAndResult & 5;
*           
*           // Output result
*           System.out.println("Value of bitwiseAndResult after bitwise AND assignment: " +
*           bitwiseAndResult);
*           
*           // Bitwise OR assignment
*           int bitwiseOrResult = 3;
*           bitwiseOrResult |= 8;  // Equivalent to bitwiseOrResult = bitwiseOrResult | 8;
*           
*           // Output result
*           System.out.println("Value of bitwiseOrResult after bitwise OR assignment: " + 
*           bitwiseOrResult);
*           
*           // Bitwise XOR assignment
*           int bitwiseXorResult = 9;
*           bitwiseXorResult ^= 3;  // Equivalent to bitwiseXorResult = bitwiseXorResult ^ 3;
*           
*           // Output result
*           System.out.println("Value of bitwiseXorResult after bitwise XOR assignment: " +
*           bitwiseXorResult);
*           
*           // Left shift assignment
*           int leftShiftResult = 5;
*           leftShiftResult <<= 2;  // Equivalent to leftShiftResult = leftShiftResult << 2;
*           
*           // Output result
*           System.out.println("Value of leftShiftResult after left shift assignment: " + 
*           leftShiftResult);
*           
*           // Right shift assignment
*           int rightShiftResult = 16;
*           rightShiftResult >>= 2;  // Equivalent to rightShiftResult = rightShiftResult >> 2;
*           
*           // Output result
*           System.out.println("Value of rightShiftResult after right shift assignment: " + 
*           rightShiftResult);
*           
*           // Unsigned right shift assignment
*           int unsignedRightShiftResult = -8;
*           unsignedRightShiftResult >>>= 2;  // Equivalent to unsignedRightShiftResult = 
*           unsignedRightShiftResult >>> 2;
*           
*           // Output result
*           System.out.println("Value of unsignedRightShiftResult after unsigned right shift
*           assignment: " + unsignedRightShiftResult);
*       }
*   }
*/

Increment and Decrement Operators: Increment and decrement operators are used to increase or decrease the value of a variable by 1.

// ++ (increment by 1)
// -- (decrement by 1)

/*
*   Example Code
* 
*   class ExampleCode{
* 
*   public static void main(String args[]){
*       int x = 5;
*       int y = 10;
*       
*       // Increment operator
*       x++;  // Equivalent to x = x + 1;
*       
*       // Decrement operator
*       y--;  // Equivalent to y = y - 1;
*       
*       // Output results
*       System.out.println("Value of x after increment: " + x);
*       System.out.println("Value of y after decrement: " + y);
*       
*       // Post-increment and post-decrement
*       int a = 15;
*       int b = a++;  // Post-increment, b gets the current value of a, then a is incremented
*       int c = 20;
*       int d = c--;  // Post-decrement, d gets the current value of c, then c is decremented
*       
*       // Output results
*       System.out.println("Value of a: " + a);
*       System.out.println("Value of b (after post-increment): " + b);
*       System.out.println("Value of c: " + c);
*       System.out.println("Value of d (after post-decrement): " + d);
*   }
*   }
*/


Conditional Operator (Ternary Operator):The conditional operator is a shorthand way of writing an if-else statement in a single line.

// ? : (conditional expression) //

/*
*   Example Code with Conditional (Ternary) Operator
* 
*   class ExampleCode {
* 
*       public static void main(String args[]) {
*           int a = 10;
*           int b = 20;
*           
*           // Using the conditional operator to find the maximum of two numbers
*           int max = (a > b) ? a : b;
*           
*           // Output result
*           System.out.println("The maximum of " + a + " and " + b + " is: " + max);
*           
*           // Using the conditional operator in a more complex expression
*           int x = 5;
*           int result = (x % 2 == 0) ? (x * 2) : (x * 3);
*           
*           // Output result
*           System.out.println("Result of the conditional expression for x=" + x + ": " + 
*           result);
*       }
*   }
*/


Instanceof Operator:The instanceof operator is used to test whether an object is an instance of a particular class or interface.

//instanceof (tests whether an object is an instance of a particular class or interface)//

/*
*   Example Code with instanceof Operator
* 
*   // Define a base class
*   class Animal {
*       // Class members and methods
*   }
* 
*   // Define a derived class
*   class Dog extends Animal {
*       // Class members and methods specific to Dog
*   }
* 
*   class ExampleCode {
* 
*       public static void main(String args[]) {
*           // Create instances of the classes
*           Animal animal = new Animal();
*           Dog dog = new Dog();
*           
*           // Test instances using instanceof
*           boolean isAnimal = (animal instanceof Animal);
*           boolean isDog = (dog instanceof Dog);
*           boolean isAnimalAgain = (dog instanceof Animal);  // Dog is also an Animal
*           
*           // Output results
*           System.out.println("Is 'animal' an instance of Animal? " + isAnimal);
*           System.out.println("Is 'dog' an instance of Dog? " + isDog);
*           System.out.println("Is 'dog' an instance of Animal? " + isAnimalAgain);
*       }
*   }
*/

Type Cast Operator:he type cast operator is used for explicit type casting, converting a value from one data type to another

//(type) (explicit type casting)

/*
*   Example Code
* 
*   class ExampleCode {
* 
*       public static void main(String args[]) {
*           // Implicit type conversion (widening)
*           int intValue = 10;
*           double doubleValue = intValue;  // Automatically converted to double
*           
*           // Output result
*           System.out.println("Implicit type conversion (widening): " + doubleValue);
*           
*           // Explicit type conversion (narrowing)
*           double anotherDoubleValue = 15.75;
*           int anotherIntValue = (int) anotherDoubleValue;  // Explicitly cast to int
*           
*           // Output result
*           System.out.println("Explicit type conversion (narrowing): " + anotherIntValue);
*       }
*   }
*/

////////////////////////////////////////////////////////////////////////////////////////////////

Loops~

Loop statements allows us to execute a block of statements several number of times depending on certain condition.Java provides three ways for executing the loops. While all the ways provide similar basic functionality, they differ in their syntax and condition checking time.
A Loop tells the computer to repeat a particular set of instructions continually until a specific condition meets. 

Entry Control Loop

                        |       false
          ------------> |---------------->
         ^              /\               |
         |             /  \              |
         |            /    \             |
         |           /      \            |
         |          /        \           |
         |         /          \          |
         |        /  Condition \         |
         |        \            /         |
         |         \          /          |
         |          \        /           |
         |           \      /            |
         |            \    /             |
         |             \  /              |
         |              \/               |
         |              |  True          |
         |              |                |
         |              |                |
         |              v                |
         |        -------------          |
         |        |  Body of   |         |
         |        |   Loop     |         |
         |        --------------         |
         |              |                |
         |              |                |
         |_____________ v                |
                        |                |
                        |                |
                  -------------          |
                  | Statement  |<---------
                  --------------

An entry-controlled loop is a type of Loop in computer programming that tests the loop condition at the Loop's beginning before executing the Loop's body.As the program flow reaches an entry-controlled loop, the loop condition is tested before the first iteration of the Loop. 
If the condition meets, then the loop body will be executed. If it does not, the loop body will be skipped entirely, and the program will continue execution from the first statement following the Loop.
After running the loop for required iterations (when the condition is not met), the program exits the loop.Some popular entry-controlled loops are for Loop, while Loop, etc.

Exit Control Loop

An exit-controlled loop is a type of Loop in computer programming that tests the loop condition at the end of the Loop after executing the body of the Loop at least once.

                        |
                  -----------------
         ------->|  Body of Loop   |       
         |        -----------------
         |               |
         |              /\ 
         |             /  \ 
         |            /    \ 
         |           /      \
         |          /        \ 
         |         /          \   False
         |        /  Condition \ --------
         |        \            /         |
         |         \          /          |
         |          \        /           |
         |           \      /            |
         |            \    /             |
         |             \  /              |
         |              \/               |
         |              |  True          |
         |              |                |
         |              |                |
         |<-------------v                |
                                         |
                                         |
                   -----------           |
                  | Statements |<---------      
                   ------------

As the program flow reaches an exit-controlled loop, the loop body is executed first, and then the loop condition is tested.If the condition is met, the Loop will continue to run, and the body's code will perform again. If it does not, the Loop will exit, and the program will continue execution from the first statement following the Loop.
After running the loop for required iterations (when the condition is not met), the program exits the loop.Do-while loop is primarily used in the exit-controlled Loop

Several loops are available in programming languages, but the most common ones are:

‚óè for loop
for loop is kind of loop in which we give initialization statement, test expression and update statement can be written in one line.

Inside for, three statements are written ‚Äì

a. Initialization ‚Äì used to initialize your loop control variables. This statement is executed first and only once.

b. Test condition ‚Äì this condition is checked everytime we enter the loop.Statements inside the loop are executed till this condition evaluates to true. As soon as condition evaluates to false, loop terminates and then first statement after for loop will be executed next.

c. Updation ‚Äì this statement updates the loop control variable after every execution of statements inside loop. After updation, again test conditon is checked. If that comes true, the loop executes and process repeats. And if condition is false, the loop terminates.

/*
* 
* for (initializationStatement; test_expression; updateStatement) {
* // Statements to be executed till test_expression is true
* }
* 
*/

/*
* 
* Example Code:
* 
* public static void main(String[] args){
* for(int i = 0; i < 3; i++)
*    {
* System.out.print("Inside for loop : ");
* System.out.println(i);
*    }
* System.out.println("Done");
* }
* 
* Output:
* Inside for Loop : 0
* Inside for Loop : 1
* Inside for Loop : 2
* Done
*/

In for loop its not compulsory to write all three statements i.e.initializationStatement, test_expression and updateStatement. We can skip one or more of them (even all three)
We can also skip the test_expression. See the example below :

Variations of for loop~

The three expressions inside for loop are optional. That means, they can be omitted as per requirement.

/*
* Example code 1: Initialization part removed ‚Äì
* public static void main(String[] args) {
* int i = 0;
* for( ; i < 3; i++) {
* System.out.println(i);
* }
* }
* 
* Output:
* 0
* 1
* 2
* 
*/

/*
* 
* Example code 2: Updation part removed
* 
* public static void main(String[] args) {
* for(int i = 0; i < 3; ) {
* System.out.println(i);
* i++;
* }
* }
*
* Output:
* 0
* 1
* 2
* 
*/

/*
* 
* Example code 3: Condition expression removed ,thus making our loop infinite ‚Äì
* 
* public static void main(String[] args) {
* for(int i = 0; ; i++) {
* System.out.println(i);
* }
* }
* 
*/

/*
* Example code 4:
* We can remove all the three expression,thus forming an infinite loop 
* 
* public static void main(String[] args) {
* for( ; ; ) {
* System.out.print("Inside for loop");
* }
* }
*/

Multiple statements inside for loop~

We can initialize multiple variables, have multiple conditions and multiple update statements inside a for loop. We can separate multiple statements using comma, but not for conditions. They need to be combined using logical operators.

/*
* 
* Example code:
* 
* public static void main(String[] args){
* for(int i = 0, j = 4; i < 5 && j >= 0; i++, j--) {
* System.out.println(i + " " + j);
* }
* }
* 
* Output:
* 
* 0 4
* 1 3
* 2 2
* 3 1
* 4 0
* 
*/

While loop~

While is one kind of loop that we can use.When executing, if the test_expression result is true,then the actions inside the loop will be executed.This will continue as long as the expression result is true.

/*
* 
* Syntax
* while(test_expression){
* //Statements to be executed till test_expression is true
* }
* 
*/


Example	Code:
public static void main(String[]args){
int i=1;
while(i<=5){
System.out.println(i);
i++;
}
}
Output	:	
1
2
3
4
5

In while loop,first given test	expression will	be checked.If that evaluates to	be true,then the statements inside while will be executed.After	that,the condition will	be checked	again and the process continues	till the given condition becomes false.

Do While Loop~