    _____  ______  __     __  ______          ______   ______  _______  ________        
   |     \/      \|  \   |  \/      \        /      \ /      \|       \|        \ 
    \‚ñì‚ñì‚ñì‚ñì‚ñì  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\ ‚ñì‚ñì   | ‚ñì‚ñì  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\      |  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\ ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\ ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì
      | ‚ñì‚ñì ‚ñì‚ñì__| ‚ñì‚ñì ‚ñì‚ñì   | ‚ñì‚ñì ‚ñì‚ñì__| ‚ñì‚ñì      | ‚ñì‚ñì   \‚ñì‚ñì ‚ñì‚ñì  | ‚ñì‚ñì ‚ñì‚ñì__| ‚ñì‚ñì ‚ñì‚ñì__   
 __   | ‚ñì‚ñì ‚ñì‚ñì    ‚ñì‚ñì\‚ñì‚ñì\ /  ‚ñì‚ñì ‚ñì‚ñì    ‚ñì‚ñì      | ‚ñì‚ñì     | ‚ñì‚ñì  | ‚ñì‚ñì ‚ñì‚ñì    ‚ñì‚ñì ‚ñì‚ñì  \   
|  \  | ‚ñì‚ñì ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì \‚ñì‚ñì\  ‚ñì‚ñì| ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì      | ‚ñì‚ñì   __| ‚ñì‚ñì  | ‚ñì‚ñì ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\ ‚ñì‚ñì‚ñì‚ñì‚ñì
| ‚ñì‚ñì__| ‚ñì‚ñì ‚ñì‚ñì  | ‚ñì‚ñì  \‚ñì‚ñì ‚ñì‚ñì | ‚ñì‚ñì  | ‚ñì‚ñì      | ‚ñì‚ñì__/  \ ‚ñì‚ñì__/ ‚ñì‚ñì ‚ñì‚ñì  | ‚ñì‚ñì ‚ñì‚ñì_____ 
 \‚ñì‚ñì    ‚ñì‚ñì ‚ñì‚ñì  | ‚ñì‚ñì   \‚ñì‚ñì‚ñì  | ‚ñì‚ñì  | ‚ñì‚ñì       \‚ñì‚ñì    ‚ñì‚ñì\‚ñì‚ñì    ‚ñì‚ñì ‚ñì‚ñì  | ‚ñì‚ñì ‚ñì‚ñì     \
  \‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì \‚ñì‚ñì   \‚ñì‚ñì    \‚ñì    \‚ñì‚ñì   \‚ñì‚ñì        \‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì  \‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì \‚ñì‚ñì   \‚ñì‚ñì\‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì


/////////////////////////////////////////////////////////////////////////////////////////////////


Lets talk About Java‚òï

Java is a high-level, object-oriented, and platform-independent programming language. It was designed by James Gosling and his team at Sun Microsystems and released in 1995.
James Gosling is known as the father of Java. Before Java, its name was Oak. Since Oak was already a registered company, so James Gosling and his team changed the name from Oak to Java.

How Java Is Platform Independent~

Java achieves platform independence through its use of the Java Virtual Machine (JVM).
A key component that interprets or compiles Java programs into an intermediate form known as bytecode. 
This bytecode is not tied to any specific hardware or operating system, enabling Java's "Write Once, Run Anywhere" (WORA) principle.
When a Java program is compiled, it produces bytecode that can be executed on any device or operating system with a compatible JVM.

JDK (Java Development Kit)~

It is a kit with a compiler, Java Run-time Environment(JRE), Debuggers, and Java
documents. JDK should be installed on our computers for execution (creation,
compilation, and running) of the java program. We use the JRE Java Run-time
Environment, which provides the conditions to execute the Java program. It provides the
supporting files, JVM, and core classes.

           ---------------------------------------
           |     Java Runtime Environment(JRE)    |
           |                                      |
           |   ------------    ------------------ |
           |   |   Class   |   |  Java Virtual  | |
           |   | Libraries |   |   Machine      | |
           |   |           |   |    (JVM)       | |     
           |   -------------   ------------------ |
           |                                      |
           |  ----------------------------------- |
           |  |        Development Tools        | |
           |  |                                 | |
           |  ----------------------------------- |
           ----------------------------------------

                  Java Development Kit (JDK)

Java Runtime Environment(JRE)~

JDK includes JRE, which allows the Java program to run after installation. However, we
still can not compile it. It has a browser, applet support, and a few plugins. So, JRE is
required to run a java program on our respective computers.

JRE consists of following
‚óè Java class libraries ‚óè Java class loader ‚óè Java virtual machine (JVM)

When our software executes a particular program, it requires some environment to run
it. Usually, it is any operating system, for example, Unix, Linux, Microsoft Windows, or
macOS. Here JRE acts as a translator and supporter between the operating system and
the java program.

Java Virtual Machine(JVM)~

It is a significant part of JRE (Java Run-time Environment). When a program is run using
JDK and JRE, it also goes to the JVM. It contains three phases:

1. Compile the Code: JDK (Java Development Kit) provides a JAVAC compiler to get
through this step. JDK converts source code into compiled code (a specific
format) that can be easily interpreted by the JRE(Java Run-time Environment).

2. Run the Code: The bytecode provided by the compiler is run using JVM. JAVAC
compiler produces compiled code which is converted to machine code using
platform-specific JVMs. Different platforms have different JVMs. JVMs convert
the bytecode into platform-specific machine code.

3. Bytecode in the development process: We know JAVAC is present in JDK and
helps compile source code into bytecode which a JVM can execute. The
compiler saves it as a .class file. It can be viewed as a bytecode using a
disassembler like javap.

                               //How Java‚òï Code is Executed//

-------------        -------------------         -------------        
| Java Code  |       |     JAVAC        |       |  Byte Code  |   
| (.java)    |------>|  (Java Compiler) |------>|  (.class)   |
|            |       |                  |       |             |
-------------        --------------------       ---------------
                                                       |
                                                       |
                                                       v
                                      -----------------------------------
                                      |               JVM                |   
                                      |      (Java Virtual Machine)      |
                                      |                                  |
                                      ------------------------------------
                                                       |
                                                       |
                                                       |
                                                       v
                                               -----------------
                                               |    Native      |
                                               | (Machine Code) |      
                                               ------------------

features of Java~

1. Object-Oriented Programming Language
- Managing the program in terms of the collection of objects provides a clear
structure for the programs.
- Code maintenance and modification become easier.
- The main concepts of Object-Oriented programming are Abstraction,Encapsulation, Inheritance,and Polymorphism.
- Being an object-oriented language, Java supports methods (referred to as native
methods) written in other languages like C and C++.

2. Platform Independent
- Java is platform-independent because it uses JVM, which compiles source code
into bytecodes.
- Bytecodes can run on any operating system, be it Linux, Windows, or macOS,
which means if we compile a program on Linux OS, then we can run it on
Windows OS and vice-versa.
- Every OS has its own JVM (Java Virtual Machine), but the output produced by all
the OS is the same after the execution of the bytecode.
- This feature makes Java programs more simple, more secure, and more
portable.
- Writing code once and running it anywhere is an alluring feature of being
platform independent language.

3. Robust
- Java is reliable because it is developed in such a way that the Java compiler
detects even those errors that are not easily detected by other programming
languages.
- Features like robust garbage collection, memory allocation, and Exception
Handling makes it more reliable.
- Java uses a JIT (Just In Time) compiler where the code is executed on demand
by the compiler.
- This way, only those methods are completed that are called making applications
execute faster.

4. Multithreading
- Java program allows execution of more than one part of a program at one instance for maximum utilization of the CPU.

5. Distributed
- Java facilitates users to create distributed applications.
- RMI (Remote Method Invocation) and EJB(Enterprise Java Beans) are used for
creating distributed applications.
- This feature of Java makes us able to access files by calling the methods from
any machine on the internet.

/////////////////////////////////////////////////////////////////////////////////////////////////

Variables~

A variable is a container which holds the value while the Java program is executed. A variable is assigned with a data type.Variable is a name of memory location. 

/*
* 
* Syntax for Declaring a Variable:
* 
* Datatype variable_name  = [value]; 
* 
*/

Here type is one of Java primitive datatypes. The variable_name is the name of a variable. We can initialize the variable by specifying an equal sign and a value (Initialization is optional). However,the compiler never assigns a default value to an uninitialized local variable in Java. 

Rules for writing variable names -

üëâüèª All variable names may contain uppercase and lowercase letters (a- z, A-Z), underscore (_) dollar sign ($) and the digits 0 to 9. The dollar sign character is not intended for general use. No spaces and no other special characters are allowed.

üëâüèª The variable names must not begin with a number.

üëâüèª Java is case- sensitive. Uppercase characters are distinct from lowercase characters.

üëâüèª A Java keyword (reserved word) cannot be used as a variable name.

Datatypes~

Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory. 

       -----------------------------------------------------
       | DATA TYPE   |     DEFAULT VALUE    | DEFAULT SIZE |
       -----------------------------------------------------
       | char        | '\0'(null character) |   2 Bytes    |
       | byte        |         0            |   1 Byte     |
       | short       |         0            |   2 Bytes    |
       | int         |         0            |   4 Bytes    | 
       | long        |         0L           |   8 Bytes    |
       | float       |        0.0f          |   4 Bytes    |
       | Double      |        0.0d          |   8 Bytes    |
       | Boolean     |        false         |   1 Bytes    |
       -----------------------------------------------------

Taking Input~

For taking a Input in Java we use Scanner Class.In Java, Scanner is a class in java.util package used for obtaining the input of the primitive types like int, double, etc. and strings.Using the Scanner class in Java is the easiest way to read input in a Java program.The Java Scanner class breaks the input into tokens using a delimiter that is whitespace by default. It provides many ways to read and parse various primitive values.

In order to use scanner you have to write this import statement at the top

// import java.util.Scanner; //

Some commonly used Scanner class methods are as follows:

        ------------------------------------------------------------------------------- 
        |      METHOD                                DESCRIPTION                       |
        | public String next()         It returns the next token fromthe Scanner.      |
        | public String nextLine()     It moves the Scanner position to the next line  |
        |                               and returns the value as a string.             |
        | public byte nextByte()       It scans the next token as a byte.              |
        | public short nextShort()     It scans the next token as a short value.       |
        | public int nextInt()         It scans the next token as an int value.        |
        | public long nextLong()       It scans the next token as a long value.        |
        | public float nextFloat()     It scans the next token as a float value.       |  
        | public doublenextDouble()    It scans the next token as a double value       |
        --------------------------------------------------------------------------------

Taking Character as Input~

Java Scanner class provides nextInt() method for reading an integer value, nextDouble() method for reading a double value, nextLong() method for reading a long value, etc. But there is no nextChar() method in the Scanner class to read a character in Java. 
To read a character as input, we use next().charAt(0). The next() function returns the next token in the input as a string and charAt(0) function returns the first character in that string.

/*
* Example code to read a character as input:
*
* import java.util.Scanner;
* public class ScannerDemo1 
* {
* public static void main(String[] args)
*   {
* Scanner s = new Scanner(System.in);
* char ch = s.next().charAt(0); // character input
* System.out.println("input character = " +ch);
*   }
* }
* 
* Sample Input:
* k
* Output:
* input character = k
*
*/

About Main~ 

// public static void main(String[] args)  //

This is the line at which the program will begin executing. This statement is similar to start block in flowcharts. All Java programs begin execution by calling main().The curly braces{} indicate start and end of main. 

print()/println() Methods~

In order to print things to console we have to write - System.out.println("Hello World").
The built-in method print() is used to display the string which is passed to it.This output string is not followed by a newline, i.e., the next output will start on the same line.

The built-in method println() is similar to print(), except that println() outputs a newline after each call.

/*
* 
* Example Code:
* public static void main(String[] args) 
*  {
* System.out.println("Hello World");
* System.out.println("Programming is fun");
*  }
* 
* Output:
* Hello World
* Programming is fun
* 
*/

/////////////////////////////////////////////////////////////////////////////////////////////////

Conditional Statements~

Conditionals are used to execute a certain section of code only if some specific condition is fulfilled,and optionally execute other statements if the given condition is false.The result of given conditional expression must be either true or false.

                 |
                 |
                 |
                 v
                 /\
                /  \
               /    \       
              /      \
             /        \
            /          \
           /            \           false
          / Conditional  \_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
          \  Expression  /                               |
           \            /                                |
            \          /           --------------------------------------------
             \        /            | Statement Block is executed if condition  |
              \      /             |                   Is False                |
               \    /              ---------------------------------------------
                \  /                                     |
                 \/                                      |
                 |                                       |
       true      |                                       |
                 |                                       |
                 v                                       |
  -------------------------------------------            |
 | Statement Block is executed if condition  |           |
 |                   Is True                 |           |
 ---------------------------------------------           |
                 |                                       |
                 |<---------------------------------------
                 |
                 v
             ----------
             |  Exit  |
             ----------

Different variations of	this conditional statement are	‚Äì

üëâüèª if	statement
if statement evaluates the given test expression.If it is evaluated to true, then statements inside the if block will be executed.Otherwise, statements inside if block is skipped.

/*
* 
* Syntax
* 
* if(test_expression)
*     {
* //Statements to be executed only when test_expression is true
*     }
* 
*/

/*
* 
* Example Code
* public static void main(String args[])
*   {
* int n=5;
* if(n<10)
*     {
* System.out.print("Inside if statement");
*     }
* System.out.println("Outside if statement");
*   }
* 
* Output
* 
* Inside if statement
* Outside if statement
* 
*/

So if the condition given inside if parenthesis	is true, then statements inside if block	are executed first and then rest of the	code.And if the	condition evaluates to	false, then	statements inside if block will	be skipped.

üëâüèª If‚Äìelse statement

if statement evaluates the given test expression.If it is evaluated to	true,then statements	inside the if block will be executed.Otherwise,statements inside else block will be executed. After that,rest of the statements will be executed normally.

/*
* 
* Syntax
* 
* if(test_expression)
*  {
* //Statements to be executed when test_expression is true
*  }
* else
*  {
* //Statements to be executed when test_expression is false
*  }
* /

/*
* 
* Example Code:
* 
* public static void main(String[]args)
* {
* int a	=10,b=20;
* if(a>b)
*        {
* System.out.println("a	is bigger");
*        }
* else
*        {
* System.out.println("b	is bigger");
*        }
* }
* 
* Output
* 
* b is bigger
* 
*/

üëâüèª if  else‚Äìif
Using this we can execute statements based on multiple conditions.

/*	
* Syntax
* 
* if(test_expression_1)
*  {
* //Statements to be executed only when test_expression_1 is true
*  }
* else if(test_expression_2)
*  {
* //Statements to be executed only when test_expression_1 is false and test_expression_2 is true
*  }
* 
* else if(test_expression_2)
* {
* //Statements to be executed only when test_expression_1 & test_expression_2 are false and	
* test_expression_3 is true
* }
* ....
* ....
* 
* else 
*  {
* //Statements to be executed only when all the above test expressions are false
*  }

Out of all block of statements,	only one will be executed based	on the given test expression,	all others will	be skipped.As soon as any expression evaluates to true,	that block of statement	will be	executed and rest will be skipped.If none of the expression evaluates to true,then	the statements inside else will	be executed.

/*
* 
* Example Code:
* 
* public static void main(String[]args)
*  {
* int a=5;
* if(a<3)
*   {
* System.out.println("one");
*   }
* else if(a<10)
*    {
* System.out.println("two");
*    }
* else if(a<20)
*    {
* System.out.println("three");
*    }
* else 
*    {
* System.out.println("four");
*    }
* }
* 
* Output:two
*/

üëâüèª Nested if statament
We can put another if‚Äìelse statament inside an if.

/*
* 
* Syntax
* 
* if(test_expression_1)	
*     {
* //Statements to be executed when test_expression_1 is	true
* if(test_expression_2)	
*        {
*          //Statements to be executed when test_expression_2 is true
*        }
* else 
*        {
* //Statements to be executed when test_expression_2 is	false
*        }
*      }
* 
*/

/*
* 
* Example Code:
* 
* public static void main(String[]args)	
*   {   
* int a=15;
* if(a>10)
*  {
*  if(a>20)
*   {
* System.out.println("Hello");
*   }
* else
*   {
* System.out.println("Hi");
*   }
* }
* }
* 
* Output:Hi
*/

/////////////////////////////////////////////////////////////////////////////////////////////////

üëâüèª return keyword

return is a special keyword,when encountered ends the main.That	means,no statament will	be	executed after return statament.

/*
* 
* Example Code:
* 
* public static void main(String[]args){
* 
* int a=10;
* if(a>5){
* System.out.println("Hello");
* return;
*        }
* System.out.println("Hi");
* }
* 
* Output:Hello
* 
*/

/////////////////////////////////////////////////////////////////////////////////////////////////